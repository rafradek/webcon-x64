# vim: set sts=2 ts=8 sw=2 tw=99 et ft=python:
import os, sys

def ResolveEnvPath(env, folder):
  if env in os.environ:
    path = os.environ[env]
    if os.path.isdir(path):
      return path
    return None

  head = os.getcwd()
  oldhead = None
  while head != None and head != oldhead:
    path = os.path.join(head, folder)
    if os.path.isdir(path):
      return path
    oldhead = head
    head, tail = os.path.split(head)

  return None

def Normalize(path):
  return os.path.abspath(os.path.normpath(path))

class WebconConfig(object):
  def __init__(self):
    self.sdks = {}
    self.binaries = []
    self.sm_root = None
    self.extensions = []

  @property
  def tag(self):
    if builder.options.debug == '1':
      return 'Debug'
    return 'Release'

  def detectSDKs(self):
    if builder.options.sm_path:
      self.sm_root = builder.options.sm_path
    else:
      self.sm_root = ResolveEnvPath('SOURCEMOD12', 'sourcemod-1.12')
      if not self.sm_root:
        self.sm_root = ResolveEnvPath('SOURCEMOD', 'sourcemod')
      if not self.sm_root:
        self.sm_root = ResolveEnvPath('SMCENTRAL', 'sourcemod-central')

    if not self.sm_root or not os.path.isdir(self.sm_root):
      raise Exception('Could not find a source copy of Sourcemod')
    self.sm_root = Normalize(self.sm_root)

  def configure(self):
    builder.AddConfigureFile('pushbuild.txt')

    cxx = builder.DetectCompilers()

    if cxx.like('gcc'):
      cxx.defines += [
        'stricmp=strcasecmp',
        '_stricmp=strcasecmp',
        '_snprintf=snprintf',
        '_vsnprintf=vsnprintf',
        'HAVE_STDINT_H',
        'GNUC',
      ]
      cxx.cflags += [
        '-pipe',
        '-fno-strict-aliasing',
        '-Wall',
        '-Wno-unused',
        '-Wno-switch',
        '-msse',
        '-m64',
        '-fPIC',
      ]
      cxx.cxxflags += [
          '-std=c++2a',
      ]

      have_gcc = cxx.vendor == 'gcc'
      have_clang = cxx.vendor == 'clang'
      if have_clang or (have_gcc and cxx.version >= '4'):
        cxx.cflags += ['-fvisibility=hidden']
        cxx.cxxflags += ['-fvisibility-inlines-hidden']
        if have_clang or (have_gcc and cxx.version >= '4.6'):
          cxx.cflags += ['-Wno-narrowing']
        if (have_gcc and cxx.version >= '4.7') or (have_clang and cxx.version >= '3'):
          cxx.cxxflags += ['-Wno-delete-non-virtual-dtor']
        if have_gcc and cxx.version >= '4.8':
          cxx.cflags += ['-Wno-unused-result']
      if have_clang:
        cxx.cxxflags += ['-Wno-implicit-exception-spec-mismatch']
        if (builder.target_platform == 'mac' and cxx.version >= '5.1') or cxx.version >= '3.4':
          cxx.cxxflags += ['-Wno-deprecated-register']
        else:
          cxx.cxxflags += ['-Wno-deprecated']
        cxx.cflags += ['-Wno-sometimes-uninitialized']

      cxx.linkflags += ['-m64']
      cxx.cxxflags += [
        '-fno-exceptions',
        '-fno-threadsafe-statics',
        '-fpermissive',
        '-Wno-non-virtual-dtor',
        '-Wno-overloaded-virtual',
      ]

      if have_gcc:
        cxx.cflags += ['-mfpmath=sse']
    elif cxx.vendor == 'msvc':
      if builder.options.debug == '1':
        cxx.cflags += ['/MTd']
        cxx.linkflags += ['/NODEFAULTLIB:libcmt']
      else:
        cxx.cflags += ['/MT']
      cxx.defines += [
        '_CRT_SECURE_NO_DEPRECATE',
        '_CRT_SECURE_NO_WARNINGS',
        '_CRT_NONSTDC_NO_DEPRECATE',
        '_ITERATOR_DEBUG_LEVEL=0',
      ]
      cxx.cflags += [
        '/W3',
      ]
      cxx.cxxflags += [
        '/EHsc',
        '/GR-',
        '/TP',
      ]
      cxx.linkflags += [
        '/MACHINE:X86',
        '/SUBSYSTEM:WINDOWS',
        'kernel32.lib',
        'user32.lib',
        'gdi32.lib',
        'winspool.lib',
        'comdlg32.lib',
        'advapi32.lib',
        'shell32.lib',
        'ole32.lib',
        'oleaut32.lib',
        'uuid.lib',
        'odbc32.lib',
        'odbccp32.lib',
      ] 

    # Optimization
    if builder.options.opt == '1':
      cxx.defines += ['NDEBUG']
      if cxx.like('gcc'):
        cxx.cflags += ['-O3']
      elif cxx.like('msvc'):
        cxx.cflags += ['/Ox']
        cxx.linkflags += ['/OPT:ICF', '/OPT:REF']

    # Debugging
    if builder.options.debug == '1':
      cxx.defines += ['DEBUG', '_DEBUG']
      if cxx.like('msvc'):
        cxx.cflags += ['/Od', '/RTC1']
        if cxx.version >= 1600:
          cxx.cflags += ['/d2Zi+']

    # This needs to be after our optimization flags which could otherwise disable it.
    if cxx.vendor == 'msvc':
      # Don't omit the frame pointer.
      cxx.cflags += ['/Oy-']

    # Platform-specifics
    if builder.target_platform == 'linux':
      cxx.defines += ['_LINUX', 'POSIX']
      cxx.linkflags += ['-lrt']
      if cxx.vendor == 'gcc':
        cxx.linkflags += ['-static-libgcc']
      elif cxx.vendor == 'clang':
        cxx.linkflags += ['-lgcc_eh']
    elif builder.target_platform == 'mac':
      cxx.defines += ['OSX', '_OSX', 'POSIX']
      cxx.cflags += ['-mmacosx-version-min=10.5']
      cxx.linkflags += [
        '-mmacosx-version-min=10.5',
        '-arch', 'i386',
        '-lstdc++',
        '-stdlib=libstdc++',
      ]
      cxx.cxxflags += ['-stdlib=libstdc++']
    elif builder.target_platform == 'windows':
      cxx.defines += ['WIN32', '_WINDOWS']
	  
  def ConfigureForExtension(self, context, compiler):
    compiler.cxxincludes += [
      os.path.join(context.currentSourcePath),
      os.path.join(self.sm_root, 'public'),
      os.path.join(self.sm_root, 'public', 'extensions'),
      os.path.join(self.sm_root, 'sourcepawn', 'include'),
      os.path.join(self.sm_root, 'public', 'sourcepawn'),
      os.path.join(self.sm_root, 'public', 'amtl', 'amtl'),
      os.path.join(self.sm_root, 'public', 'amtl'),
    ]
    return compiler

Webcon = WebconConfig()
Webcon.detectSDKs()
Webcon.configure()

builder.RunBuildScripts(['conplex/AMBuilder', 'webcon/AMBuilder'], { 'Webcon': Webcon })
builder.RunScript('PackageScript', { 'Webcon': Webcon })
